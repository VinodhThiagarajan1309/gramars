package <c:get select="$topology/@utilPkg" />;

	<c:userRegion>// Begin imports<c:initialCode>

import java.util.Date;
import java.util.ArrayList;

import org.codehaus.jettison.json.JSONArray;
import org.codehaus.jettison.json.JSONException;
import org.codehaus.jettison.json.JSONObject;

import <c:get select="$topology/@exceptionPkg" />.DataException;
import <c:get select="$topology/@beanPkg" />.*;

import backtype.storm.tuple.Tuple;
import backtype.storm.tuple.Values;

	</c:initialCode>// End imports</c:userRegion>
	
public class Marshaller {

<c:iterate select="$topology/type" var="type" >
	public static <c:get select="$type/@typeJava" /> as<c:get select="$type/@typeJava" />(Tuple tuple) {
		return new <c:get select="$type/@typeJava" />(<c:iterate select="$type/field" var="field" delimiter=", ">
<c:choose >
<c:when test=" $field/@type = 'String' ">					tuple.getString(<c:get select="$field/@index"/>)</c:when>
<c:when test=" $field/@type = 'Integer' ">					tuple.getInteger(<c:get select="$field/@index"/>)</c:when>
<c:when test=" $field/@type = 'Date' ">					new Date(tuple.getLong(<c:get select="$field/@index"/>))</c:when>
<c:when test=" $field/@type = 'Long' ">					tuple.getLong(<c:get select="$field/@index"/>)</c:when>
<c:when test=" $field/@type = 'Double' ">					tuple.getDouble(<c:get select="$field/@index"/>)</c:when>
<c:when test=" $field/@type = 'Boolean' ">					tuple.getBoolean(<c:get select="$field/@index"/>)</c:when>
<c:when test=" $field/@list = 'true' ">					(<c:get select="$field/@type"/>) tuple.getValue(<c:get select="$field/@index"/>)</c:when>
<c:otherwise>					(<c:get select="$field/@actualType"/>) tuple.getValue(<c:get select="$field/@index"/>)</c:otherwise>
</c:choose>
</c:iterate>);	
	}

	public static <c:get select="$type/@typeJava" /> as<c:get select="$type/@typeJava" />(JSONObject json) throws DataException {
		try { 
			<c:get select="$type/@typeJava" /> bean = new <c:get select="$type/@typeJava" />();
<c:iterate select="$type/field" var="field">
<c:choose select="$field/@actualType" >
<c:when test=" 'String' ">
			if (json.has("<c:get select="$field/@name"/>")) {
<c:if test="$field/@list='false'">
				try { bean.<c:get select="$field/@setter"/>(json.getString("<c:get select="$field/@name"/>")); } catch (Throwable t) {}
</c:if>
<c:if test="$field/@list='true'">
            	JSONArray jarr = json.getJSONArray("<c:get select="$field/@name"/>");
	            for (int i = 0; i < jarr.length(); i++) {
					try { bean.<c:get select="$field/@adder"/>(jarr.getString(i)); } catch (Throwable t) {}
        	    }
</c:if>
			}
</c:when>
<c:when test=" 'Integer' ">
			if (json.has("<c:get select="$field/@name"/>")) {
<c:if test="$field/@list='false'">
				try { bean.<c:get select="$field/@setter"/>(json.getInt("<c:get select="$field/@name"/>")); } catch (Throwable t) {}
</c:if>
<c:if test="$field/@list='true'">
        	    JSONArray jarr = json.getJSONArray("<c:get select="$field/@name"/>");
            	for (int i = 0; i < jarr.length(); i++) {
					try { bean.<c:get select="$field/@adder"/>(jarr.getInt(i)); } catch (Throwable t) {}
            	}	
</c:if>
			}
</c:when>
<c:when test=" 'Date' ">
			if (json.has("<c:get select="$field/@name"/>")) {
<c:if test="$field/@list='false'">
				try { bean.<c:get select="$field/@setter"/>(new Date(json.getLong("<c:get select="$field/@name"/>"))); } catch (Throwable t) {}
</c:if>
<c:if test="$field/@list='true'">
        	    JSONArray jarr = json.getJSONArray("<c:get select="$field/@name"/>");
            	for (int i = 0; i < jarr.length(); i++) {
					try { bean.<c:get select="$field/@adder"/>(new Date(jarr.getLong(i))); } catch (Throwable t) {}
            	}
</c:if>
			}
</c:when>
<c:when test=" 'Long' ">
			if (json.has("<c:get select="$field/@name"/>")) {
<c:if test="$field/@list='false'">
				try { bean.<c:get select="$field/@setter"/>(json.getLong("<c:get select="$field/@name"/>")); } catch (Throwable t) {}
</c:if>
<c:if test="$field/@list='true'">
            	JSONArray jarr = json.getJSONArray("<c:get select="$field/@name"/>");
            	for (int i = 0; i < jarr.length(); i++) {
					try { bean.<c:get select="$field/@adder"/>(jarr.getLong(i)); } catch (Throwable t) {}
            	}
</c:if>
			}
</c:when>
<c:when test=" 'Double' ">
			if (json.has("<c:get select="$field/@name"/>")) {
<c:if test="$field/@list='false'">
				try { bean.<c:get select="$field/@setter"/>(json.getDouble("<c:get select="$field/@name"/>")); } catch (Throwable t) {}
</c:if>
<c:if test="$field/@list='true'">
            	JSONArray jarr = json.getJSONArray("<c:get select="$field/@name"/>");
            	for (int i = 0; i < jarr.length(); i++) {
					try { bean.<c:get select="$field/@adder"/>(jarr.getDouble(i)); } catch (Throwable t) {}
            	}
</c:if>
			}
</c:when>
<c:when test=" 'Boolean' ">
			if (json.has("<c:get select="$field/@name"/>")) {
<c:if test="$field/@list='false'">
				try { bean.<c:get select="$field/@setter"/>(json.getBoolean("<c:get select="$field/@name"/>")); } catch (Throwable t) {}
</c:if>
<c:if test="$field/@list='true'">
            	JSONArray jarr = json.getJSONArray("<c:get select="$field/@name"/>");
            	for (int i = 0; i < jarr.length(); i++) {
					try { bean.<c:get select="$field/@adder"/>(jarr.getBoolean(i)); } catch (Throwable t) {}
            	}
</c:if>
			}
</c:when>
<c:otherwise>
			if (json.has("<c:get select="$field/@name"/>")) {
<c:if test="$field/@list='false'">
				try { bean.<c:get select="$field/@setter"/>(as<c:get select="$field/@actualType" />(json.getJSONObject("<c:get select="$field/@name"/>"))); } catch (Throwable t) {}
</c:if>
<c:if test="$field/@list='true'">
            	JSONArray jarr = json.getJSONArray("<c:get select="$field/@name"/>");
            	for (int i = 0; i < jarr.length(); i++) {
					try { bean.<c:get select="$field/@adder"/>(as<c:get select="$field/@actualType" />(jarr.getJSONObject(i))); } catch (Throwable t) {}
            	}
</c:if>
			}
</c:otherwise>
</c:choose>
</c:iterate>	

			return bean;

		} catch (Throwable t) {
			throw new DataException("Invalid JSON structure for <c:get select="$type/@typeJava" /> constructor");
		}
	}

	public static Values asValues(<c:get select="$type/@typeJava" /> bean) {
		return new Values(<c:iterate select="$type/field" var="field" delimiter=", ">bean.<c:get select="$field/@getter"/>()</c:iterate>);
	}
	
	public static JSONObject asJson(<c:get select="$type/@typeJava" /> bean) throws DataException {
	
		JSONObject json = new JSONObject();

		try { 
<c:iterate select="$type/field" var="field">
<c:if test="$field/@list='false'">
<c:if test="not($topology/type[@name=$field/@actualType])">
 			if (bean.<c:get select="$field/@getter"/>() != null) {
<c:choose select="$field/@actualType">
<c:when test=" 'Date' ">
 				json.putOpt("<c:get select="$field/@name"/>", bean.<c:get select="$field/@getter"/>().getTime());
</c:when>
<c:otherwise>
 				json.putOpt("<c:get select="$field/@name"/>", bean.<c:get select="$field/@getter"/>());
</c:otherwise>
</c:choose>
 			}
</c:if>
<c:if test="$topology/type[@name=$field/@actualType]">
 			if (bean.<c:get select="$field/@getter"/>() != null) {
 				json.putOpt("<c:get select="$field/@name"/>", asJson(bean.<c:get select="$field/@getter"/>()));
 			}
</c:if>
</c:if>
<c:if test="$field/@list='true'">
<c:if test="not($topology/type[@name=$field/@actualType])">
 			if (bean.<c:get select="$field/@getter"/>() != null) {
 			    JSONArray jarr = new JSONArray();
 			    for (<c:get select="$field/@actualType"/> el: bean.<c:get select="$field/@getter"/>()) {
<c:choose select="$field/@actualType">
<c:when test=" 'Date' ">
 					jarr.put(el.getTime());			    
</c:when>
<c:otherwise>
 					jarr.put(el);			    
</c:otherwise>
</c:choose>
 			    }
 				json.putOpt("<c:get select="$field/@name"/>", jarr);
 			}
</c:if>
<c:if test="$topology/type[@name=$field/@actualType]">
 			if (bean.<c:get select="$field/@getter"/>() != null) {
 			    JSONArray jarr = new JSONArray();
 			    for (<c:get select="$field/@actualType"/> el: bean.<c:get select="$field/@getter"/>()) {
 					jarr.put(asJson(el));			    
 			    }
 				json.putOpt("<c:get select="$field/@name"/>", jarr);
 			}
</c:if>
</c:if>
</c:iterate>			
 		} catch (JSONException e) {
 			throw new DataException("JSON error when persisting <c:get select="$type/@typeJava" /> to JSON",e);
 		}

		return json;
	}

	public static String asJsonString(<c:get select="$type/@typeJava" /> bean) {
		try {
			return asJson(bean).toString();
		} catch (DataException e) {
			return "{ \"error\":\"+e.toString()+\"}";
		}
	}
</c:iterate>

	<c:userRegion>// Begin custom methods<c:initialCode>
	
	
	
	</c:initialCode>// End custom methods</c:userRegion>

}
