package <c:get select="$topic/@topicApiPkg" />;

import java.util.List;

import <c:get select="$component/@exceptionPkg" />.PartitionConsumerException;
import <c:get select="$component/@kafkaBasePkg" />.PartitionSnapshot;

import kafka.javaapi.PartitionMetadata;

public class <c:get select="$topic/@infoJava" /> {

	private String csBrokerList;
	
	public static final String <c:userRegion>topicName = "<c:initialCode><c:get select="$topic/@name" /></c:initialCode>";</c:userRegion>
	
	public <c:get select="$topic/@infoJava" />(String csBrokerList) {
		this.csBrokerList = csBrokerList;
	}

	public int partitionCount() {
		return partitions("ignore").length;
	}

	public PartitionSnapshot[] partitions(String groupId) {
		PartitionSnapshot snapshot[] = new PartitionSnapshot[0];
		try {
			<c:get select="$topic/@simpleConsumerJava" /> c = new <c:get select="$topic/@simpleConsumerJava" />(csBrokerList, 0, "__nobody");
			List<PartitionMetadata> list = c.getMetaData().partitionsMetadata();
			snapshot = new PartitionSnapshot[list.size()];
			for (PartitionMetadata pmd : list) {
				int part = pmd.partitionId();
				<c:get select="$topic/@simpleConsumerJava" /> cs = new <c:get select="$topic/@simpleConsumerJava" />(csBrokerList, part, groupId);
				long first = cs.requestEarliestAvailableOffset();
				long last = cs.requestLatestAvailableOffset();
				long firstUnread = cs.getFirstUnread();
				long committed = cs.retrieveOffset();
				snapshot[part] = new PartitionSnapshot(topicName, part, first, last, groupId, committed, firstUnread);
				cs.close();
			}
			c.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
		return snapshot;
	}

	public void resetOffsets(String groupId) {
		int partitions = partitionCount();
		for (int i = 0; i < partitions; i++) {
			try {
				<c:get select="$topic/@simpleConsumerJava" /> cs = new <c:get select="$topic/@simpleConsumerJava" />(csBrokerList, i, groupId);
				cs.commitOffset(0);
				cs.close();
			} catch (PartitionConsumerException e) {
				e.printStackTrace();
			}
		}
	}

	public void info(String groupId) {
		try {
			PartitionSnapshot snapshot[] = partitions(groupId);
			for (PartitionSnapshot s : snapshot) {
				System.out.println("["+s.getPartition()+"] "+s.getEarliestOffset()+" --> "+s.getLatestOffset()+"; next unread: "+s.getNextUnreadOffset());
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

}
